JEDIT 4.0 VERSION HISTORY

* Version 4.0pre1

+ New Features

- Ant is used instead of jmk to compile jEdit
- Utilities->Memory Status command to replace 'Show Free Memory' macro
- General look and feel settings moved to 'Appearance' option pane
- If you are using the Metal or Kunststoff L&F, the UI control font can
  be changed in Utilities->Global Options->Appearance
- 'Vertical Paste' macro (Andre Kaplan)
- View->Folding->Collapse All Folds command, equivalent to invoking
  'Expand Folds With Level' and specifying a level of 1
- File listings in the file system browser are now colorized. Change the
  colors in Utilities->Global Options->File System Browser
- When a file is loaded, jEdit now remembers if it contained a trailing
  newline, and if so, writes it out when saving the file. Previously, a
  trailing newline would always be written, regardless of it being
  present in the file on disk or not
- The tab and enter key can now be used in shortcut assignments
- Utilities->Evaluate for Selected Lines command evaluates specified
  BeanShell expression for each selected line, replacing the contents of
  that line with the return value of the expression
- Macros.confirm() method added, for use in macros
- BBj (Business Basic based on Java) syntax highlighting (Thomas Bock)
- BibTeX syntax highlighting (Nils Krahnstoever)
- Option added to sort recent file list by name
- New dockable window API. This does not affect the user interface, it
  is just a plugin implementation issue.
  - The old API (registering the dockable window using
    EditBus.addToNamedList(), and listening for a  CreateDockableWindow
    message) will continue to work, but the new API is much simpler
  - All you have to do is write a dockables.xml file, and it will even
    create the actions to open your dockable windows for you
- -nogui switch is back. If specified when jEdit is being run in
  background mode, the initial view will not be opened

+ Enhancements

- New splash screen and about box (Kris Kopicki)
- HTML documentation is now generated using DocBook XSL 1.44 stylesheets
- Option in activity log window to automatically scroll to bottom on
  output (Dirk Moebius)
- Status bar improvements:
  - Tool tips for all controls
  - Double-click on caret status shows the 'go to line' dialog box
  - Instead of showing 'multi' in gray of multiple selection was
    disabled, and in black if it was enabled, the display now
    alternates between 'multi' and 'single'
  - Same for the overwrite status; it now shows 'ins' or 'ovr'
  - I/O progress display replaced with a Java heap memory indicator
  - I/O status is now shown in the message area of the status bar
- New color scheme
- Pressing Tab while a selection is active shifts it right by one level
  of indent
- Pressing S+Tab shifts the selection right by one level of indent
- If a selection ends at the beginning of a line, that line is no longer
  considered to be part of the selection by line manipulation commands
- Improved window docking feature:
  - 'Auto open' setting in Docking option pane removed, now jEdit
    remembers which dockables were open automatically
  - Docked windows are shown inside a custom control, not a tabbed pane
  - ALL dockable windows set to dock in a certain area are shown in that
    area, not just those currently 'open'. When a dockable is requested
    for the first time, it is created and loaded
  - Changes made in the Docking option pane now take effect immediately
- Improved HyperSearch results window
- In the Shortcuts option pane, each plugin's actions are shown in a
  separate section. This solves the problem of plugin actions having
  ambiguous names (for example, "Edit Settings"). This change is the
  reason for the jEdit.addAction() method was dropped.
- Macros.message(), Macros.error() and Macros.input() methods now accept
  an arbitriary java.awt.Component, instead of a View, as the component
  that will parent the dialog box. This will not break any macros since
  BeanShell resolves methods at run-time.
- Folds are now shown in the gutter as triangles, which is more
  intuitive than filled/not-filled boxes
- jEdit now makes an effort to display popup menus on-screen. If you
  want your plugin to do this, use the new GUIUtilities.showPopupMenu()
  method.
- GNU General Public License now shown in installer
- Editing and saving a mode file, or mode catalog file within jEdit will
  automatically reload that mode, or all edit modes
- Read only status of a buffer can be changed in 'Buffer Options' dialog
  box
- A few keyboard shortcuts added to file system browser:
  ~ - goes to home directory
  / - goes to file system roots list
  - - goes to current buffer's directory
- Improved Abbreviations option pane
- Improved Styles option pane

+ Bug Fixes

- 'Recent Files' menu behaved in a strange manner if there were no
  recent files
- Fixed a NullPointerException if the 'Narrow to Selection' command
  was invoked with no selection
- JCheckBoxList typo prevented it from working in the XML plugin
- On MacOS, the option key, which is reported as ALT, can be used to
  generate user input, but jEdit ignored Alt key strokes that were not
  bound to shortcuts.
- More JDK 1.4 key event bug workarounds
- History text field border wasn't repainted after the model was changed
- If two shortcuts were assigned to a command, the second wasn't shown
  in the tool bar button tooltip
- In syntax highlighting rule sets that enabled digit highlighting but
  didn't have SEQ rules for '-' and '.', these two characters would be
  highlighted with the digit syntax style, even if they were not part of
  a numeric expression.
- Pressing Home three times put the caret at the end of the last visible
  line, not the start of the last visible line as intended
- Entering a file name in the text field of the Open dialog box would
  open that file name relative to jEdit's current working directory, not
  the directory selected in the dialog box
- Fixed possible ArrayIndexOutOfBounds when searching for regular
  expressions that start with \<
- 'Reload' command didn't preserve caret position very well if sections
  of the buffer were folded
- When running on Java 2 version 1.3 (and possibly others), the default
  size of the help viewer was not set properly
- Velocity mode had an incorrect file name glob
- In the Search and Replace dialog box, 'Replace with:' and 'Auto wrap'
  had the same Alt-key mnemonic

+ API Changes

- New methods in jEdit class for accessing properties:
  jEdit.getIntegerProperty(String name, int def);
  jEdit.setIntegerProperty(String name, int value);
  jEdit.getFontProperty(String name);
  jEdit.getFontProperty(String name, Font def);
  jEdit.setFontProperty(String name, Font value);
  jEdit.getColorProperty(String name);
  jEdit.getColorProperty(String name, Color def);
  jEdit.setColorProperty(String name, Color value);
- VariableGridLayout is now used to lay out tool bars, instead of
  BoxLayout. This means it is no longer necessary to add a
  Box.createGlue() to the tool bar to prevent it from being centered.
- Removed these APIs, which have been deprecated since jEdit 2.6:
  EditPlugin.createMenuItems(View,Vector,Vector) (override
  createMenuItems(Vector) instead)
  GUIUtilities.loadMenuItem(View,String) (use loadMenuItem(String)
  instead)
  GUIUtilities.loadToolBarIcon() (use loadIcon instead)
  GUIUtilities.showFileDialog() (use showVFSFileDialog() instead)
- Removed these APIs, which have been deprecated since jEdit 3.0:
  jEdit.addAction()
  EditAction.actionPerformed()
  EditAction.isSelected(Component)
  EditAction.getView(EventObject)
  EditAction.getBuffer(EventObject)
- CreateDockableWindow class deprecated. Write a dockables.xml file
  instead of listening for this message.
- DockableWindow interface deprecated. No need to implement it any more.
- EditBus named list stuff deprecated. It was only being used for
  dockables and ErrorList's error sources. To register dockables, use
  the new dockables.xml API. To register error sources, use the relevant
  APIs in the ErrorList plugin.
- TextAreaHighlight.init() method removed. If it exists, it will be
  called via reflection so that old plugins can continue to work, but
  new plugins should pass a text area instance to the constructor of the
  highlighter.
