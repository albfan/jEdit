TO DO

- wait for John to release an updated get_package_name macro
- wait for John to import jEditLauncher

+ features:

+ minor:

- jEdit.get/setInteger/Color/FontProperty()
- scroll to newly added tool bar button or context menu item in option
  panes
- select-* actions: add to selection in multi-select mode
- appendix in plugin guide on contributing plugins
- Macros.confirm()
- saving a read-only file: show a confirmation dialog box
- when loading plugins and such, check for settingsDir == jEditHome
- collapse-all-folds action that calls expandFolds(1)
- changing read-only flag in buffer options
- replace shift-left/shift-right actions with an overloaded TAB action,
  and shift-left bound to S+TAB? Then A+LEFT and A+RIGHT can be used for
  other purposes (prev/next-bracket?)
- trailingEOL property, set on load if file has a trailing newline, when
  saving, only write a trailing newline if property is set
- if last token of a line has a background color, remainder of line will
  be drawn with that color
- after a VFSUpdate for a mode file is received, reload that mode automatically
- after a VFSUpdate for a mode catalog is received, reload all modes
- when loading a file: if the stream supports a mark, read first 16 bytes,
  check for unicode byte order mark, push back, if one is found, set
  encoding to Unicode automatically
- handle missing modes more gracefully
- plugin manager: show all dependencies, not just first-order ones
- removing a plugin should offer to remove the ones that depend on it too
- status bar:
  - "over" changes to "ins" instead of being grayed out
  - ditto for "multi"
  - remove "fold" indicator
  - instead of mini i/o progress, show messages in status bar: number
    of i/o requests pending, and setMessageAndClear("foo") when i/o
    complete
  - memory display in status bar, click opens memory display dialog;
    replaces 'show free memory' macro
  - double-click on line number opens go to line dialog box

+ major:

- use VariableGridLayout to lay out tool bars, not a BoxLayout
- new document model
- docking:
  - each tab has a close box
  - multiple instances of a dockable
  - <name>-to-front action for multi dockables
  - toggle-<name> action for toggling
  - <name> action calls addDockableWindow(), no longer a toggle
  - remove auto-open setting from option pane; instead, save and restore
    which dockables are open automatically
- hypersearch:
  - in selection option
  - new search results window for each search
  - file names in bold, show number of results in that file
  - expand all branches
  - remove 'hypersearch results' menu item
  - select lines with matches capability
- smarter/better userInput() that accepts strings, not just characters
- configurable metal font
- changing key bindings for ENTER, TAB, C+TAB, S+TAB, etc.
- keymaps replace .shortcut properties
  - loaded from $HOME/.jedit/keymaps, and jedit.jar
  - one keymap can 'extend' another
  - keymaps are XML files with <bind>, <unbind> tags
  - jEdit, emacs, keymaps included, maybe others
  - instead of hard-coded modifier swapping on MacOS, have a MacOS keymap
- shortcuts option pane: one category for each plugin, to avoid
  lumping all plugin actions in one list
- syntax styles:
  - optional underline, color can be changed
  - style editor: check boxes next to fg, bg, underline flags; if off,
    use default
  - better default color scheme
- abbrevs option pane: add, remove, edit buttons, don't show abbrev
  expansion in table
- file system browser:
  - right-click menu: show all toolbar options
  - parent directory, parent directories menu, reload, local drives, home,
    go to buffer directory
  - back, forward menu items
  - some additional keyboard shortcuts:
    - ~ goes to home directory
    - / goes to roots:
    - - goes to buffer directory
  - smaller 14x14 icons
  - easier way for plugins to add right-click menu commands
  - custom colors for icons for file names matching specified globs
  - two-pane "jEdit commander" window with support for moving and
    copying files
  - recursive remove of directories, with safety features for symlinks
  - new VFS methods:
    int getUnixPermissions()
    void setUnixPermissions()
  - UNIX_PERMISSIONS_CAP capability
  - VFS.DirectoryEntry: icon and color fields
- shift-left/shift-right: behave differently with rectangular selection
- docking option pane: changes take effect immediately
- option pane API changes:
  - boolean validate() method added; if returns false, user is not allowed
    to close dialog with 'OK' button, have to either fix values or cancel.
  - OptionsDialog handles selective initialization of option panes;
    AbstractOptionPane's _init() and _save() methods no longer necessary
    and deprecated.
- dockable view registers window
  - RegisterChanged message added
  - update display when shown register changes
  - use a timer to update display of $ register every 5 seconds or so
  - use a timer to update display of % register if it is a ClipboardRegister
- new token types:
  - MARKUP renamed MARKUP1
  - MARKUP2
  - MARKUP3
  - MARKUP4
  - KEYWORD4 (in addition to KEYWORD[123])
  - LINK (highlighted with blue underline, for HTML mode and friends)
  - INLINE (for inline scripts)
- HTML mode:
  - inside tags, delegate on*="..." to JavaScript mode,
    style="..." to CSS mode
  - better <script>/<style> handling using nested delegates
- this might be too hard: DELEGATE_TYPE attribute of SPAN rule, defines
  token type from which default attributes are obtained for all tokens
  inside the SPAN. eg, if a rule delegates to the javascript mode, with a
  DELEGATE_TYPE of INLINE, and INLINE is defined as a light-gray background,
  all tokens in the JavaScript source that do not define a background color
  will be drawn with a light-gray background.
- save markers when a buffer is closed, adding/removing markers shouldn't
  set the dirty flag
- per-mode encodings and line separators, to optionally override those
  auto-detected when a buffer is loaded
- they should be overridable on a global basis too
- folding:
  - needs to be improved, but I haven't thought about it yet

+ bugs:

- how to record S+0-9?
- if start is at the end of a line, .* always matches an empty string
- formatting problems in user's guide in table cells
- finish persistent splits code
- complete word: keys to navigate don't work with some Java versions
- don't do #save# stuff if destination directory is not writeable
- installing source for already installed plugins is not possible
- directory search: continue even if a file can't be loaded
- a line consisting entirely of spaces & word wrap
- switching option panes real fast
- fix '... is not a function name' when running openjade
- GUIUtilities method that makes sure popups appear within the screen
  bounds
- vfs browser: >1 request error when clicking 'up'?
- prev line fold gutter bug
- tabbing to text area fails
- zlib decompression errors in plugin manager
- failed saves should not clear the dirty flag
- see if new beanshell fixes trailing \n bug
- get rid of final blank page of user's guide
- aborts not always fired
- fix dragStart handling in DockableWindowContainer.TabbedPane
- folding paint up bug
- expand-fold too aggressive
- replace in sel doesn't work if rect
- macro guide: JOptionPane not a good idea for getting user input?
- globalColors setting:
  - tree controls, file system browser icons, tool bar icons look a bit
    ugly with different backgrounds
  - help viewer looks ugly
  - selected borders in list, tree, table wrong colors
  - updateUI doesn't update tree colors
  - restart should not be necessary for 'globalColors' to take effect
- editing on last line shouldn't cause scrolling
- 'Stop' in plugin manager needs to be handled more gracefully
