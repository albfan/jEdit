/*
Move_Lines_Up.bsh - Beanshell macro to move a selection of lines up by one line.

Copyright (c) Dale Anson, 2004, 2012

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   3. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// check buffer read-only status
if (buffer.isReadOnly()) {
    Macros.error(view, "File is read only.");
    return ;
}

// prep for indenting
Mode mode = buffer.getMode();
boolean shouldIndent = false;
String[] indentProps = new String[]{"indentOpenBrackets", "indentOpenBrackets", "unalignedOpenBrackets", "unalignedCloseBrackets", "indentNextLine", "unindentThisLine", "electricKeys", "doubleBracketIndent", "lineUpClosingBracket"} ;
for (String name : indentProps) {
    if (mode.getProperty(name) != null) {
        shouldIndent = true;
        break;
    }
}

// get the current selection(s)
Selection[] selections = textArea.getSelection();
Selection selection;

// if nothing is selected, select current line
if (selection == null || selections.length == 0) {
    int line = textArea.getCaretLine();
    int start_offset = textArea.getLineStartOffset(line);
    int end_offset = textArea.getLineEndOffset(line);
    selection = new Selection.Range(start_offset, end_offset);
    textArea.addToSelection(selection);
}
else {
    selection = selections[0];   
}

// this macro only works with single selection
if (selections.length > 1) {
    Macros.error(view, "Line move does not work with multiple selection,\nwill only move first selection.");
}

int first_line = selection.getStartLine();

// check bounds
if (first_line == 0) {
    return ;    // at top, nowhere to go
}

// get selection last line offset
int last_line = selection.getEndLine();

// set caret to start of first selected line
textArea.setCaretPosition(textArea.getLineStartOffset(first_line));

// select entire block of lines
textArea.selectNone();
selection = new Selection.Range(textArea.getLineStartOffset(first_line), textArea.getLineStartOffset(last_line));
textArea.addToSelection(selection);

// line offsets after move
int next_first_line = first_line - 1;
int next_last_line = last_line - 1;

// move
Registers.cut(textArea, '_');
textArea.goToPrevLine(false);
Registers.paste(textArea, '_', false);
textArea.goToPrevLine(false);

// set caret to start of first selected line
textArea.setCaretPosition(textArea.getLineStartOffset(next_first_line));

// indent
if (shouldIndent) {
    buffer.indentLines(next_first_line, next_last_line);
}

// reselect
textArea.selectNone();
selection = new Selection.Range(textArea.getLineStartOffset(next_first_line), textArea.getLineStartOffset(next_last_line));
textArea.addToSelection(selection);

