TO DO

+ before 4.0pre1:

- switching from narrowed buffer, to one with caret at already zero might
  cause problems, since physFirstLine won't be updated?
- inserting line after closed fold issues -- fix in OffsetManager
- check for out-of-bounds access in Buffer class
- optimize content and offset managers
- positions
- new undo
- narrowing
- buffer properties
- move away from Swing APIs in the core
- respect collapseFolds buffer property when:
  - pasting
  - narrowing
  - anything else?
- auto indent: do not indent on {{{
- investigate nextLineRequested() -- replace with a buffer event.
- recompile Firewall.jar before releasing
- tip about smart case replace
- gutter scope bracket repaint problems
- geometry workaround from j
- update macros for API changes
- macro guide entry for Andre's Vertical Paste macro
- new goodies need to be documented
- conventions section in user's guide: mention Enter activating default
  button, Escape activating 'Cancel' or equivalent
- mention Alt-key mnemonics
- QuickNotepad XSL docs
- write explicit folding tips

+ features:

- drop LatestVersion plugin
- roll Firewall plugin into core
- web start version
- selective undo
- if moving caret resulted in expansion of a fold, that fold should be
  collapsed when the caret leaves that fold
- <file>?line= or ?marker=
- keyboard select file in fs browser!
- wacky bracket matching stuff: only on }, ), ]
- read up on JDK 1.4 focus API
- mmb click in fs browser == double click
- persistent fold visibility option
- next-fold/prev-fold actions
- clickable stack traces in activity log
- fold navigator to browse fold tree in explicit fold mode
- command to surround selection with explicit fold markers
- search & replace: option to skip folded lines
- complete word: update on the fly as chars typed
- improved window docking:
  - do something about there being more buttons than can fit
  - DockableLayout: handle too large
- if caret inside hidden line, don't show bracket highlight
- bracket matching:
  - if not on screen, do matching in background thread and show matching
    line in status bar
  - fix bug
- Alt-key alternatives for arrow keys and home and end
- select file + search in directory in fsb: should use that file's extension
- reintroduce -bshclient command line switch
- complete word: custom WrapAroundJList control
- jEdit 3.1 seems slower than 3.0. Folding-related code needs to be
  optimized? Also faster scrolling.
- plugin size reporting, new install plugins dialog UI layout
- saving a read-only file: show a confirmation dialog box
- ant targets to replace mk_installer/mk_source scripts
- tool bar option pane: editing existing entries
- version number in splash screen
- mode-specific context menu and maybe even tool bar
- frame.setState(Frame.NORMAL);
- line-uncomment command
- search and replace of specific token types only
- complete-word: complete current mode's keywords
- recording 'evaluate for selected lines'
- rollover toolbar buttons option
- select-* actions: add to selection in multi-select mode
- when loading plugins and such, check for settingsDir == jEditHome
- file system browser:
  - path field:
    - select all when gets focus
    - completion
  - show wait cursor while directory is loading
  - new UI layout:
    [Up][V][Commands V][Favorites V]
    [Reload][Drives][Home][Curr Buf]
    Path:       [__________________]
    [ ] Filter: [__________________]
  - Two-pane 'file system commander' window, with copy/move buttons
  - recursive directory delete
  - right-click menu: show all toolbar options
  - easier way for plugins to add right-click menu commands
  - some means of redirecting double-clicks on a file to a VFS
  - new VFS methods:
    int getUnixPermissions()
    void setUnixPermissions()
  - UNIX_PERMISSIONS_CAP capability
  - FTP plugin: after connect, need to give browser a new directory.
    _listDirectory(): returns VFS.Directory class, which contains a
    VFS.DirectoryEntry array, and a path name.
    backwards compatibility -- maybe instead,
    _listDirectory(...,String[] newPath)
    -- but that is a bit hackish. _listDirectoryEx() is a bit hackish too.
- improve next/prev-word commands
- option on JDK 1.4 to have the LnF decorate windows and dialogs
- search and replace: scroll text area so selection is visible despite
  dialog position
- better auto indent
- caret beyond end of line
- directory chooser dialog box
- graphical regular expression editor
- appendix in plugin guide on contributing plugins
- when loading a file: if the stream supports a mark, read first 16 bytes,
  check for unicode byte order mark, push back, if one is found, set
  encoding to Unicode automatically
- plugin manager: show all dependencies, not just first-order ones
- removing a plugin should offer to remove the ones that depend on it too
- hypersearch:
  - show replace results in search results window
  - new search results window for each search, no 'search results' menu
    item
- smarter/better userInput() that accepts strings, not just characters
- option pane API changes:
  - boolean validate() method added; if returns false, user is not allowed
    to close dialog with 'OK' button, have to either fix values or cancel.
  - OptionsDialog handles selective initialization of option panes;
    AbstractOptionPane's _init() and _save() methods no longer necessary
    and deprecated.
- new token types:
  - MARKUP renamed MARKUP1
  - MARKUP2
  - MARKUP3
  - MARKUP4
  - KEYWORD4 (in addition to KEYWORD[123])
  - INLINE (for inline scripts)
- HTML mode:
  - inside tags, delegate on*="..." to JavaScript mode,
    style="..." to CSS mode
  - better <script>/<style> handling using nested delegates
- this might be too hard: DELEGATE_TYPE attribute of SPAN rule, defines
  token type from which default attributes are obtained for all tokens
  inside the SPAN. eg, if a rule delegates to the javascript mode, with a
  DELEGATE_TYPE of INLINE, and INLINE is defined as a light-gray background,
  all tokens in the JavaScript source that do not define a background color
  will be drawn with a light-gray background.
- save markers when a buffer is closed, adding/removing markers shouldn't
  set the dirty flag
- per-mode encodings and line separators, to optionally override those
  auto-detected when a buffer is loaded
- they should be overridable on a global basis too
- if last token of a line has a background color, remainder of line will
  be drawn with that color
- improve rectangular selection:
  - shift-left/shift-right: behave differently with rectangular selection
  - 'fill' command
  - 'vertical paste' command
  - selection past end of line
  - treat a tab like n spaces, not one character
  - replace in selection with rectangular selections
- JOptionPane: try adding keyboard mnemonics for no -vs- cancel?
- keymaps replace .shortcut properties
  - loaded from $HOME/.jedit/keymaps, and jedit.jar
  - one keymap can 'extend' another
  - keymaps are XML files with <bind>, <unbind> tags
  - jEdit, emacs, keymaps included, maybe others
  - instead of hard-coded modifier swapping on MacOS, have a MacOS keymap
- dockable view registers window
  - RegisterChanged message added
  - update display when shown register changes
  - use a timer to update display of $ register every 5 seconds or so
  - use a timer to update display of % register if it is a ClipboardRegister
- store register contents in ~/.jedit/registers.xml
- ScrollBarHighlight interface:
  Color getColor()
  int[] getHighlightedLines()
  String getToolTipText(int line)
- Used by ErrorList, HyperSearch, markers
- use java2d:
  - to draw PanelWindowContainer rotated buttons
  - to draw block caret (instead of XOR)

+ bugs:

- work thread hang?
- when a new text area is created, if caret is on a bracket, not matched
  initially
- resizing doesn't update horizontal scroll bar
- editing on last line shouldn't cause scrolling
- JDK 1.3: about box broken
- find next with $ or ^
- Shift+TAB on Java 1.1
- find btn no work
- custom stylesheet: no xmlns
- eval-for-selected-lines doesn't work with rectangular selection
- how to handle S+0-9?
- if start is at the end of a line, .* always matches an empty string
- formatting problems in user's guide in table cells
- finish persistent splits code
- complete word: keys to navigate don't work with some Java versions
- don't do #save# stuff if destination directory is not writeable
- installing source for already installed plugins is not possible
- directory search: continue even if a file can't be loaded
- a line consisting entirely of spaces & word wrap
- switching option panes real fast
- fix '... is not a function name' when running openjade
- vfs browser: >1 request error when clicking 'up'?
- tabbing to text area fails
- zlib decompression errors in plugin manager
- failed saves should not clear the dirty flag
- see if new beanshell fixes trailing \n bug
- get rid of final blank page of user's guide
- aborts not always fired
- macro guide: JOptionPane not a good idea for getting user input?
- globalColors setting:
  - tree controls, file system browser icons, tool bar icons look a bit
    ugly with different backgrounds
  - help viewer looks ugly
  - selected borders in list, tree, table wrong colors
  - updateUI doesn't update tree colors
  - restart should not be necessary for 'globalColors' to take effect
- 'Stop' in plugin manager needs to be handled more gracefully
- binding an action to ` doesn't work
- evalutate for selected lines: > 1 selection per line
- folding paint up bug
- prev line fold gutter bug
