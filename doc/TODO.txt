TO DO

Note that this is not a complete to do list. It mostly only lists bugs
and quirks that I need to fix eventually.

- can do perl q|...| etc. using begin/end substitution!
- means of overriding escape to fix C# @"..." issue
- perl: q{}, etc.

- already loaded check needs to go somewhere
- 
- got a multiple i/o requests thing once
- browser: /, ~, -
- save to symlink: don't overwrite symlink
- browser's default size
- browser: tab: don't insert full path
- completion: handle full paths
- file dialog: handle ~ ENTER, - ENTER

- mouse over text for actions

- F2 doesn't work in JTree/JTable, maybe others
- servicemanager javadocs
- file changed dialog: don't reload files if flag is off
- save caret info first
- electric scroll inconsistent w.r.t. deletes
- narrow: scrolls one down
- update man page
- make gutter fully painted by extensions just like text area
- format should show an error if the line len is 0, not beep
- shortcut editor: restore default button
- path shown twice in tree: maybeReloadDirectory()
- box in io progress
- don't rely on browser view for completion
- adapt vfs filename field for the path display at the top
- vfs dialogs: only one field?
- vfs.isValidPath()
- need to get rid of endsWith("/") || endsWith(File.separator) bullshit
- vfs browser: open in new view: doesn't focus the new view
- action bar layout problem
- eval-for-selected-lines doesn't work with rectangular selection
- recording 'evaluate for selected lines'
- evalutate for selected lines: > 1 selection per line
- split view line insert: repainted twice, selection problems
- action bar: wrap around arrow keys
- searching in a buffer w/ narrowed fold
- macro record: doesn't respect overwrite
- save file resulting in fold collapse -- scroll to 0
- closing lots of files is slow
- today:
  - rect select and trailing whitespace
- redo/undo dirty restore is broken.
- synchro scroll needs a rewrite & folding
- help:
  - titles in search are fucked
  - FAQ: better titles
- new plugin mgr:
  - ask before selecting dependencies & 'don't show again'
- update horizontal scroll width immediately on buffer switch
- C+ENTER 3 menu command - bar not hidden - need input handler action
  listeners or something
- C+ENTER 3 C+2
- A+# on OS X, need better modifier mapping on OS X
- how to handle S+0-9?
- C+e , and . insert , and . in the buffer, ditto for [ and ]
- bizarre dockable window manager button layout problem
- return after collapsed fold: insert line after end of fold
- respond to shortcuts on KeyTyped only, track KeyPressed/KeyReleased to
  know mod status
- some JLists do not auto-scroll on keystroke
- format -- instead of \n\n, what if it has \n   \n?
- if A depends on B but A is loaded before B and B breaks, A ends up
  being loaded. Solution: load plugins in order of dependencies?
- plugin manager: install plugins, no restart, install another: deps bad
- plugin deps need JAR name, not plugin name
- maximisation state bug: open window, resize to size X. close window,
  open window again, resize to size Y. maximise. close window, open
  window again, it has size X not size Y.
- expand fold: try to expand even if already expanded
- openFile(): can open two copies of the same buffer if a) remote b)
  canonPath != path
- aborts not always fired
- globalColors setting:
  - help viewer looks ugly
  - selected borders in list, tree, table wrong colors
- motif l&f: shortcuts in menu items

+ verify:

[error] PluginListDownloadProgress$DownloadThread: java.lang.NullPointerException
[error] PluginListDownloadProgress$DownloadThread:  at java.io.UnixFileSystem.getBooleanAttributes(UnixFileSystem.java:127)
[error] PluginListDownloadProgress$DownloadThread:  at java.io.File.exists(File.java:679)
[error] PluginListDownloadProgress$DownloadThread:  at org.gjt.sp.jedit.jEdit.getNotLoadedPluginJARs(jEdit.java:3023)
[error] PluginListDownloadProgress$DownloadThread:  at org.gjt.sp.jedit.jEdit.getNotLoadedPluginJARs(jEdit.java:875)
[error] PluginListDownloadProgress$DownloadThread:  at org.gjt.sp.jedit.pluginmgr.PluginList$Plugin.checkIfInstalled(PluginList.java:165)
[error] PluginListDownloadProgress$DownloadThread:  at org.gjt.sp.jedit.pluginmgr.PluginList.addPlugin(PluginList.java:78)
[error] PluginListDownloadProgress$DownloadThread:  at org.gjt.sp.jedit.pluginmgr.PluginListHandler.endElement(PluginListHandler.java:180)
- focus problem with hypersearch in floating window
- dwm: not always focused correctly
- JDK 1.4 focus bugs
- if loadMode() throws error, save of a mode file fails?

+ cleanups:

- text area mouse handler cleanup
- clean up VFSManager.errorOccurred() -vs- BufferIORequest.ERROR_OCCURRED
- BrowserView.reloadDirectory(): hardcoded design decisions
- finish persistent splits code
- custom stylesheet: no xmlns
- NO_WORD_BREAK and NO_LINE_BREAK: need to think about this, is it worth
  keeping INVALID? report errors in some other manner?
- clean up the way macro hierarchy is stored
- dialog parenting for fsb colors pane, vfs browser dialog
- remove 8 text area per buffer limit

+ features:

- plugin api:
  - new option pane api
  - dockable action cache
  - cache properties
  - action labels
  - refactor JARClassLoader
  - EditPlugin.JAR handles starting/stopping
  - add jEdit methods to unload plugins
  - the cache
  - services
- right click menu: plugins & favorites
- don't show 'new directory' in favorites:
  - new bracket matching:
    - use interface to determine match
- add option for confirm.save-all
- consistent formatting for mode files
- gutter options: add option to completely hide gutter
- expand: scroll to end of fold if possible
- HTML mode: use new token types
- hypersearch: open in new split
- new bsh and bsh command path
- beanshell: invokeAction() function
- options dialog box can use a little cleanup:
  Appearance, Loading and Saving, General panes a bit confusing
- need a new jEditLauncher
- plugin tutorial:
  - plugin build environment docs
  - auto-created actions
  - link to jEdit devel page
  - quicknotepad class -- links to API docs
  - functions - links to API docs
  - quicknotepad docs
- plugin tips and techniques:
  - common. properties, using properties for UI strings
  - cutting down on startup time
  - canned dialog boxes in GUIUtilities
  - tools.jar
  - string comparison in MiscUtilities
  - writing a macro handler
  - writing a fold handler
  - OperatingSystem class
  - option groups
  - listening for buffer changes
  - canned controls:
    animated icon, color well button, enhanced dialog,
    font selector, history text field, 
    jcheckboxlist, rolloverbutton,
    variablegridlayout
  - displaying a help viewer
  - canned icons
  - vfs implementation
  - running stuff in i/o threads
  - multi-threaded i/o
  - jeditresource: protocol
  - getting line syntax info, textutilities.getTokenAtOffset()
  - text area extensions
  - text area caret & scroll listeners
  - status bar messages & readNextChar()
- links to API docs in macro guide
- vfs javadoc: invokeAndWait() example for createVFSSession()
- files with names of the form foo: are not handled very well in some
  cases since jEdit thinks they are URLs.
- <script> in javadoc
- user's guide:
  - vertical paste & rect select insertion
  - part III
    - non-beanshell languages
    - after canned dialog description: sidebar about full-blown GUIs -- mention
      upcoming dialog macro
    - describe alternative ways to obtain buffers, edit panes, text areas,
      in a sidebar about changing them
    - is Log described elsewhere? move to API guide and link from 15.5.2
      (using activity log as a tracing tool).
- wheel mouse -- option: jEdit mods -vs- system-wide mods
- auto indent:
  if(foo)
    while(bar)
    {
      //
    }
  <--- cursor here
- examples of EOL_SPAN_REGEXP matching in docs
- remember floating & cloned dockables in perspective
- caret saving needs to be more flexible w.r.t. split panes
- add dockable window state change msg
- range-comment & rect select
- options for recent files list, recent files menu
- autosave recent file list?
- hypersearch refresh
- option to disable floating window dock bar
- MARK_PREVIOUS delegate like SEQ; update mail.xml

+ performance:

- don't tokenize lines twice
- line delete: gap optimization
- jEdit.getBuffer(): use a hashtable, not a linear scan. have the
  buffer notify jEdit of path changes though.
- menu drag: slow
- bracket matching: no delay for current line match??
- final optimization for OffsetManager: scan to zero or scan to end
- getNext/PrevVisibleLine() is a linear scan
- do buffer load AWT half immediately after work thread half
- prioritize work requests so that active buffers get loaded first?
  too much of a hack?
- replace all in a directory could be faster
- buffer.setMode() slow
- positions should be gapped too
- eliminate redundant scans and events when loading buffer
- make vfs listing faster
- don't repaint whole selection when resizing
- could make non-soft wrap chunk merge even faster!
- syntax SPAN::END substitution: String --> char[] --> String
- delete line magic caret w/ block caret
- replace with lookahead/lookbehind doesn't work
- is getScreenLineOfOffset() called often?
- if caret is at the end of a buffer when doing a replace all, a lot of
  repaint() and getLineOfOffset() calls are made, however this doesn't
  seem to affect performance that much.
- optimize for no folding & no soft wrap case:
  - reset() and changed() don't need to scan
  - scroll/physUp/Down() simpler
- inserting lines repaints whole text area

jEdit buffer local properties:
:wrap=hard:maxLineLen=72:indentSize=2:
