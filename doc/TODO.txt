[error] Buffer: Exception while sending buffer event to org.gjt.sp.jedit.textarea.DisplayManager$BufferChangeHandler@3e7799 :
[error] Buffer: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 206
[error] Buffer:  at org.gjt.sp.jedit.textarea.DisplayManager.getPrevVisibleLine(DisplayManager.java:189)
[error] Buffer:  at org.gjt.sp.jedit.textarea.DisplayManager.hideLineRange(DisplayManager.java:1064)
[error] Buffer:  at org.gjt.sp.jedit.textarea.DisplayManager.expandFolds(DisplayManager.java:488)
[error] Buffer:  at org.gjt.sp.jedit.textarea.DisplayManager$BufferChangeHandler.bufferLoaded(DisplayManager.java:1547)
[error] Buffer:  at org.gjt.sp.jedit.Buffer.fireBufferLoaded(Buffer.java:4320)
[error] Buffer:  at org.gjt.sp.jedit.Buffer.access$1100(Buffer.java:71)
[error] Buffer:  at org.gjt.sp.jedit.Buffer$1.run(Buffer.java:309)


TO DO

Note that this is not a complete to do list. It mostly only lists bugs
and quirks that I need to fix eventually.

+ 4.3 drivers:

- independent text area component
  - gutter: has a depenency on View to do focus highlight, and Marker
  - display manager: has a dependency on View for currently focused
  - text area: depends on view for status bar, input handling,
    smart home/end macro record, showing dialog boxes, properties,
    abbrevs, status bar showing various flags
  - mouse handler: properties, registers
  - text area transfer handler: opening files dependency
  text area
- save help index
- C+j SPACE: space not registered
- indent folding: fold marker not always updated
switching wrap status in status bar doens't update vertical scroll
- hypersearch results & folds
- format: preserve comment chars at start
- token values negative?
- single line selection should not hide line highlight
- jedit -encoding
- filled cursor option
- blink frequency option
- why is still added to end of kill ring?
- goToBuffer() -- if any parent has zero height or zero width...
- better auto indent
- save selection between buffer switch
- more configurable file system browser
- more accurate syntax highlighting
- input methods
- draganddrop patch
- ditch aelfred
- deferred loading API for macro handlers
- autosave directory option
- S+INS, etc in swing controls
- vfs: a way of running awt requests not all at end
- wrapped dock buttons broken

+ docs:

- document optional dependencies
- deferred loading mention.
- addCommandPath()
- API thread safety
- add note to documentation about exponential-time regexps
- document deep indent
- note about dependencies
- plugin tutorial:
  - plugin build environment docs
  - auto-created actions
  - link to jEdit devel page
  - quicknotepad class -- links to API docs
  - functions - links to API docs
  - quicknotepad docs
- plugin tips and techniques:
  - common. properties, using properties for UI strings
  - cutting down on startup time
  - canned dialog boxes in GUIUtilities
  - tools.jar
  - string comparison in MiscUtilities
  - writing a macro handler
  - writing a fold handler
  - OperatingSystem class
  - option groups
  - listening for buffer changes
  - canned controls:
    animated icon, color well button, enhanced dialog,
    font selector, history text field, 
    jcheckboxlist, rolloverbutton,
    variablegridlayout
  - displaying a help viewer
  - canned icons
  - vfs implementation
  - running stuff in i/o threads
  - multi-threaded i/o
  - jeditresource: protocol
  - getting line syntax info, textutilities.getTokenAtOffset()
  - text area extensions
  - text area caret & scroll listeners
  - status bar messages & readNextChar()
- vfs javadoc: invokeAndWait() example for createVFSSession()

[error] ExtensionManager: java.lang.NullPointerException
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.StructureMatcher$Highlight.getOffsets(StructureMatcher.java:181)
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.StructureMatcher$Highlight.paintHighlight(StructureMatcher.java:207)
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.StructureMatcher$Highlight.paintValidLine(StructureMatcher.java:147)
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.TextAreaExtension.paintScreenLineRange(TextAreaExtension.java:70)
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.ExtensionManager.paintScreenLineRange(ExtensionManager.java:146)
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.ExtensionManager.paintScreenLineRange(ExtensionManager.java:106)
[error] ExtensionManager:  at org.gjt.sp.jedit.textarea.TextAreaPainter.paintComponent(TextAreaPainter.java:699)

- tabs to spaces with rect select
- more flexible mirror list

- CA+PLUS +: bad

check tips of the day
- help:
  - titles in search are fucked
- sidebars: need a border or some sort

[error] WorkThread: java.lang.ClassCastException
[error] WorkThread:  at archive.ArchiveVFS.getDirectories(Unknown Source)
[error] WorkThread:  at archive.ArchiveVFS.cacheDirectories(Unknown Source)
[error] WorkThread:  at archive.ArchiveVFS._listDirectory(Unknown Source)
[error] WorkThread:  at org.gjt.sp.jedit.browser.BrowserIORequest.listDirectory(BrowserIORequest.java:159)
[error] WorkThread:  at org.gjt.sp.jedit.browser.BrowserIORequest.run(BrowserIORequest.java:90)
[error] WorkThread:  at org.gjt.sp.util.WorkThread.doRequest(WorkThread.java:194)
[error] WorkThread:  at org.gjt.sp.util.WorkThread.doRequests(WorkThread.java:161)
[error] WorkThread:  at org.gjt.sp.util.WorkThread.run(WorkThread.java:135)

- drag and drop, not at caret position?
- sidekick out of memory error!
[error] ChunkCache: BUG: skew=1,out.size()=0
[error] ChunkCache: BUG: skew=1,out.size()=1

- SLASH -vs- / shortcut issue
- VFS browser pathsEqual(): case sensitivity!
- DnD still dosn't work as expected when draging from the same buffer,
but differen text area (for example droping at the position where drag
was started erases text)- no support for vertical pasting
- anoying cursor blinking (responsible for this is scrolling option :
textArea.moveCaretPosition(pos,JEditTextArea.ELECTRIC_SCROLL) in
dragOver() method)
- C+d & killring
- jEdit.checkBufferStatus() fucks with split panes
- complete word not wide enough
- test keyboard completion with expanded/collapsed tree
- test keyboard completion with high latency VFS
- option to disable context menu
- plugin mgr inspection of not-loaded plugins
- history text field tweak
- printing: check default printer setting
- fsb default size

+ obscure:

- bsh bugs:
  ; after else if()
  longs not read correctly if prefixed with 0x
- no need to wait for requests after newFile()
- class loading problems
- motif l&f: shortcuts in menu items
- some JLists do not auto-scroll on keystroke
- C+b -- click -- keys don't work
- how to handle S+0-9?
- clean up VFSManager.errorOccurred() -vs- BufferIORequest.ERROR_OCCURRED
- auto indent: don't de-indent on enter if no leading indent at all?
- remove-marker, select-next/prev-marker/bracket
- invoking action bar command twice
- backup time distance setting
- if A depends on B but A is loaded before B and B breaks, A ends up
  being loaded. Solution: load plugins in order of dependencies?
- expand fold: try to expand even if already expanded
- format -- instead of \n\n, what if it has \n   \n?
- C+ENTER 3 C+2
- don't show 'new directory' in favorites:
- auto indent:
  if(foo)
    while(bar)
    {
      //
    }
  <--- cursor here

+ performance:

- closing lots of files is slow -- esp. with close all dialog box!
- menu drag: slow
- bracket matching: no delay for current line match??
- final optimization for OffsetManager: scan to zero or scan to end
- do buffer load AWT half immediately after work thread half
- replace all in a directory could be faster
- buffer.setMode() slow
- eliminate redundant scans and events when loading buffer
- make vfs listing faster
- don't repaint whole selection when resizing
- could make non-soft wrap chunk merge even faster!
- syntax SPAN::END substitution: String --> char[] --> String
- is getScreenLineOfOffset() called often?
- if caret is at the end of a buffer when doing a replace all, a lot of
  repaint() and getLineOfOffset() calls are made
- optimize for no folding & no soft wrap case:
  - reset() and changed() don't need to scan
  - scroll/physUp/Down() simpler
- inserting lines repaints whole text area
- see if getLineOfOffset() can be optimized
- optimize 1 long line case
- two repaints in line insert
- redundant calls to recalculateLastPhysicalLines()/updateScrollBars()
- redundant updateChunksUpTo() calls

jEdit buffer local properties:
:wrap=hard:maxLineLen=72:indentSize=2:
