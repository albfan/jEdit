/*
 * Make_Double_Box_Comment.bsh - a BeanShell macro for
 * the jEdit text editor - makes a individual "wing" style
 * comment of equal width from each of the selected lines
 * in the current text buffer
 * Copyright (C) 2001 John Gellene
 * jgellene@nyc.rr.com
 * http://community.jedit.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the jEdit program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * This version requires jEdit3.2pre1 or greater
 *
 * $Id$
 *
 * Checked for jEdit 4.0 API
 *
 */

void makeDoubleBoxComment()
{
    startComment = buffer.getMode().getProperty("commentStart");
    endComment = buffer.getMode().getProperty("commentEnd");

    if(startComment == null || endComment == null)
    {
        Macros.message(view,
            "The buffer's editing mode does not support comments.");
        return;
    }

	selectedLines = textArea.getSelectedLines();
    Vector newLines = new Vector(selectedLines.length);

    maxLineLength = 0;
	for(i = 0; i < selectedLines.length; ++i)
    {
        fullLine = TextUtilities.tabsToSpaces(
			textArea.getLineText(selectedLines[i]),
            buffer.getTabSize());
        maxLineLength = Math.max(maxLineLength, fullLine.length());
        newLines.addElement(fullLine);
    }

    newLineLength = maxLineLength + startComment.length() +
        endComment.length() + 2;  // two additional spaces

    sb = new StringBuffer(startComment);

    for(i = 0; i < selectedLines.length; ++i)
    {
        oldLine = newLines.elementAt(i).toString();
        extraSpaces = maxLineLength - oldLine.length();
        sb.append(' ')
          .append(oldLine);
        while( --extraSpaces != -1)
            sb.append(' ');
        sb.append(' ')
          .append(endComment);
        offsetBOL = textArea.getLineStartOffset(selectedLines[i]);
        textArea.setCaretPosition(offsetBOL);
        textArea.goToEndOfLine(true);
        textArea.setSelectedText(sb.toString());
/*      use this instead if you want tabs back in:           */
/*      textArea.setSelectedText(TextUtilities.spacesToTabs( */
/*          sb.toString(), buffer.getTabSize());             */
        sb.setLength(startComment.length());
    }
}

makeDoubleBoxComment();

/*

	Macro index data (in DocBook format)
<!-- NOTE:  change pairs of ?* *? to comment delimiters when using
 	 in DocBook
-->

<listitem>
    <para><filename>Make_Double_Box_Comments.bsh</filename></para>
    <abstract><para>
        Makes a individual wing style comment of equal width for each
        selected line in the current buffer.
    </para></abstract>

   <informalexample>
   <programlisting>?*  This is an example of the kind                *?
?*  of comment (for Java or C/C++) produced       *?
?*  by this macro. It has uniform width           *?
?*  regardless of the width of the several lines. *?

&lt;!-- HTML or SGML code                         --&gt;
&lt;!-- will look like this when the macro is run --&gt;</programlisting>
    </informalexample>
</listitem>

*/

// end of Make_Double_Box_Comment.bsh

